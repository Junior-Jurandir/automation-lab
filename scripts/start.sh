#!/bin/bash

# Script de inicializa√ß√£o do laborat√≥rio de automa√ß√£o
# Autor: Automation Lab
# Vers√£o: 1.0

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para imprimir mensagens coloridas
print_message() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Fun√ß√£o para verificar se o Docker est√° rodando
check_docker() {
    if ! docker info > /dev/null 2>&1; then
        print_message $RED "‚ùå Docker n√£o est√° rodando. Por favor, inicie o Docker primeiro."
        exit 1
    fi
    print_message $GREEN "‚úÖ Docker est√° rodando"
}

# Fun√ß√£o para verificar se o Docker Compose est√° instalado
check_docker_compose() {
    if ! command -v docker-compose &> /dev/null; then
        print_message $RED "‚ùå Docker Compose n√£o est√° instalado."
        exit 1
    fi
    print_message $GREEN "‚úÖ Docker Compose est√° dispon√≠vel"
}

# Fun√ß√£o para criar diret√≥rios necess√°rios
create_directories() {
    print_message $BLUE "üìÅ Criando diret√≥rios necess√°rios..."
    
    directories=(
        "data/n8n"
        "data/postgres"
        "data/sqlserver"
        "data/redis"
        "data/pgadmin"
        "logs/postgres"
        "logs/sqlserver"
        "logs/nginx"
        "config/n8n"
    )
    
    for dir in "${directories[@]}"; do
        mkdir -p "$dir"
        print_message $GREEN "  ‚úÖ Criado: $dir"
    done
}

# Fun√ß√£o para definir permiss√µes
set_permissions() {
    print_message $BLUE "üîê Configurando permiss√µes..."
    
    # Permiss√µes para PostgreSQL
    sudo chown -R 999:999 data/postgres logs/postgres 2>/dev/null || true
    
    # Permiss√µes para SQL Server
    sudo chown -R 10001:0 data/sqlserver logs/sqlserver 2>/dev/null || true
    
    # Permiss√µes para N8N
    sudo chown -R 1000:1000 data/n8n config/n8n 2>/dev/null || true
    
    # Permiss√µes para PgAdmin
    sudo chown -R 5050:5050 data/pgadmin 2>/dev/null || true
    
    print_message $GREEN "‚úÖ Permiss√µes configuradas"
}

# Fun√ß√£o para iniciar os servi√ßos
start_services() {
    print_message $BLUE "üöÄ Iniciando servi√ßos..."
    
    # Construir e iniciar os containers
    docker-compose build --no-cache
    docker-compose up -d
    
    print_message $GREEN "‚úÖ Servi√ßos iniciados"
}

# Fun√ß√£o para verificar status dos servi√ßos
check_services() {
    print_message $BLUE "üîç Verificando status dos servi√ßos..."
    
    sleep 10
    
    services=("postgres" "sqlserver" "redis" "n8n" "pgadmin" "adminer" "nginx")
    
    for service in "${services[@]}"; do
        if docker-compose ps | grep -q "$service.*Up"; then
            print_message $GREEN "  ‚úÖ $service est√° rodando"
        else
            print_message $RED "  ‚ùå $service n√£o est√° rodando"
        fi
    done
}

# Fun√ß√£o para mostrar informa√ß√µes de acesso
show_access_info() {
    print_message $BLUE "üåê Informa√ß√µes de Acesso:"
    echo ""
    print_message $YELLOW "N8N (Automa√ß√£o):"
    echo "  URL: https://localhost"
    echo "  Usu√°rio: admin"
    echo "  Senha: admin123"
    echo ""
    print_message $YELLOW "PgAdmin (PostgreSQL):"
    echo "  URL: http://localhost:8080"
    echo "  Email: admin@automation.local"
    echo "  Senha: admin123"
    echo ""
    print_message $YELLOW "Adminer (Universal DB):"
    echo "  URL: http://localhost:8081"
    echo ""
    print_message $YELLOW "PostgreSQL:"
    echo "  Host: localhost"
    echo "  Porta: 5432"
    echo "  Usu√°rio: postgres"
    echo "  Senha: postgres123"
    echo ""
    print_message $YELLOW "SQL Server:"
    echo "  Host: localhost"
    echo "  Porta: 1433"
    echo "  Usu√°rio: sa"
    echo "  Senha: SqlServer123!"
    echo ""
    print_message $YELLOW "Redis:"
    echo "  Host: localhost"
    echo "  Porta: 6379"
    echo "  Senha: redis123"
    echo ""
}

# Fun√ß√£o principal
main() {
    print_message $BLUE "üîß Iniciando Laborat√≥rio de Automa√ß√£o N8N"
    echo "=================================================="
    
    check_docker
    check_docker_compose
    create_directories
    set_permissions
    start_services
    check_services
    
    echo ""
    print_message $GREEN "üéâ Laborat√≥rio iniciado com sucesso!"
    echo ""
    show_access_info
    
    print_message $BLUE "üìù Para parar os servi√ßos, execute: ./scripts/stop.sh"
    print_message $BLUE "üìù Para ver logs, execute: ./scripts/logs.sh [servi√ßo]"
}

# Executar fun√ß√£o principal
main "$@"