# Script para parar o laborat√≥rio - Windows PowerShell
# Autor: Automation Lab
# Vers√£o: 1.0

param(
    [switch]$Remove,
    [switch]$Clean,
    [switch]$Help
)

# Fun√ß√£o para mostrar ajuda
function Show-Help {
    Write-Host "Laborat√≥rio de Automa√ß√£o N8N - Script de Parada" -ForegroundColor Blue
    Write-Host "================================================" -ForegroundColor Blue
    Write-Host ""
    Write-Host "Uso: .\stop.ps1 [op√ß√µes]" -ForegroundColor White
    Write-Host ""
    Write-Host "Op√ß√µes:" -ForegroundColor Yellow
    Write-Host "  -Remove    Remove os containers ap√≥s parar" -ForegroundColor White
    Write-Host "  -Clean     Remove containers e volumes (CUIDADO: dados ser√£o perdidos)" -ForegroundColor White
    Write-Host "  -Help      Mostra esta ajuda" -ForegroundColor White
    Write-Host ""
    Write-Host "Exemplos:" -ForegroundColor Yellow
    Write-Host "  .\stop.ps1           # Apenas parar servi√ßos" -ForegroundColor White
    Write-Host "  .\stop.ps1 -Remove   # Parar e remover containers" -ForegroundColor White
    Write-Host "  .\stop.ps1 -Clean    # Parar e limpar tudo (CUIDADO!)" -ForegroundColor White
    Write-Host ""
}

# Fun√ß√£o para parar servi√ßos
function Stop-Services {
    Write-Host "üõë Parando servi√ßos..." -ForegroundColor Blue
    
    try {
        $runningServices = docker-compose ps --services --filter "status=running"
        if ($runningServices) {
            docker-compose stop
            Write-Host "‚úÖ Servi√ßos parados" -ForegroundColor Green
        } else {
            Write-Host "‚ö†Ô∏è  Nenhum servi√ßo estava rodando" -ForegroundColor Yellow
        }
    } catch {
        Write-Host "‚ùå Erro ao parar servi√ßos: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# Fun√ß√£o para remover containers
function Remove-Containers {
    Write-Host "üóëÔ∏è  Removendo containers..." -ForegroundColor Blue
    
    try {
        docker-compose down
        Write-Host "‚úÖ Containers removidos" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå Erro ao remover containers: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# Fun√ß√£o para limpar volumes
function Remove-Volumes {
    Write-Host "‚ö†Ô∏è  ATEN√á√ÉO: Removendo volumes (dados ser√£o perdidos)..." -ForegroundColor Red
    Write-Host ""
    Write-Host "Esta opera√ß√£o ir√° apagar TODOS os dados dos bancos de dados," -ForegroundColor Red
    Write-Host "workflows do N8N, configura√ß√µes e logs!" -ForegroundColor Red
    Write-Host ""
    
    $confirmation = Read-Host "Tem certeza? Digite 'yes' para confirmar"
    
    if ($confirmation -eq "yes") {
        try {
            docker-compose down -v
            Write-Host "‚úÖ Volumes removidos" -ForegroundColor Green
            
            # Remover tamb√©m diret√≥rios locais se existirem
            $dataDirectories = @("data", "logs")
            foreach ($dir in $dataDirectories) {
                if (Test-Path $dir) {
                    $removeLocal = Read-Host "Remover tamb√©m diret√≥rio local '$dir'? (s/N)"
                    if ($removeLocal -eq "s" -or $removeLocal -eq "S") {
                        Remove-Item -Path $dir -Recurse -Force
                        Write-Host "‚úÖ Diret√≥rio '$dir' removido" -ForegroundColor Green
                    }
                }
            }
        } catch {
            Write-Host "‚ùå Erro ao remover volumes: $($_.Exception.Message)" -ForegroundColor Red
        }
    } else {
        Write-Host "‚ùå Opera√ß√£o cancelada" -ForegroundColor Yellow
    }
}

# Fun√ß√£o para verificar status ap√≥s opera√ß√£o
function Show-Status {
    Write-Host ""
    Write-Host "üìä Status atual:" -ForegroundColor Blue
    
    try {
        $containers = docker-compose ps
        if ($containers -match "Up") {
            Write-Host "Alguns containers ainda est√£o rodando:" -ForegroundColor Yellow
            docker-compose ps
        } else {
            Write-Host "‚úÖ Nenhum container est√° rodando" -ForegroundColor Green
        }
    } catch {
        Write-Host "‚úÖ Nenhum container encontrado" -ForegroundColor Green
    }
}

# Fun√ß√£o principal
function Main {
    if ($Help) {
        Show-Help
        return
    }
    
    # Verificar se docker-compose est√° dispon√≠vel
    try {
        docker-compose --version | Out-Null
    } catch {
        Write-Host "‚ùå Docker Compose n√£o est√° dispon√≠vel" -ForegroundColor Red
        exit 1
    }
    
    if ($Clean) {
        Write-Host "üîß Parando e limpando laborat√≥rio..." -ForegroundColor Blue
        Write-Host "====================================" -ForegroundColor Blue
        Stop-Services
        Remove-Volumes
    } elseif ($Remove) {
        Write-Host "üîß Parando e removendo containers..." -ForegroundColor Blue
        Write-Host "====================================" -ForegroundColor Blue
        Stop-Services
        Remove-Containers
    } else {
        Write-Host "üîß Parando laborat√≥rio..." -ForegroundColor Blue
        Write-Host "=========================" -ForegroundColor Blue
        Stop-Services
    }
    
    Show-Status
    
    Write-Host ""
    Write-Host "‚úÖ Opera√ß√£o conclu√≠da!" -ForegroundColor Green
    
    if (!$Clean -and !$Remove) {
        Write-Host ""
        Write-Host "üí° Para iniciar novamente: .\scripts\start.ps1" -ForegroundColor Blue
        Write-Host "üí° Para remover containers: .\scripts\stop.ps1 -Remove" -ForegroundColor Blue
        Write-Host "üí° Para limpar tudo: .\scripts\stop.ps1 -Clean" -ForegroundColor Blue
    }
}

# Executar fun√ß√£o principal
Main