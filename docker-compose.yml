version: '3.8'

services:
  # N8N - Plataforma de Automação
  n8n:
    build:
      context: ./docker/n8n
      dockerfile: Dockerfile
    container_name: n8n-automation
    restart: unless-stopped
    ports:
      - "5678:5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=admin123
      - N8N_HOST=localhost
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - WEBHOOK_URL=http://localhost:5678/
      - GENERIC_TIMEZONE=America/Sao_Paulo
      - N8N_LOG_LEVEL=info
      - N8N_LOG_OUTPUT=console,file
      - N8N_LOG_FILE_LOCATION=/home/node/logs/
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=n8n_user
      - DB_POSTGRESDB_PASSWORD=n8n_password
      - N8N_ENCRYPTION_KEY=your-encryption-key-here-change-this
      - N8N_USER_MANAGEMENT_DISABLED=false
      - N8N_COMMUNITY_PACKAGES_ENABLED=true
    volumes:
      - ./data/n8n:/home/node/.n8n
      - ./logs:/home/node/logs
      - ./config/n8n:/home/node/config
    depends_on:
      - postgres
      - sqlserver
    networks:
      - automation-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5678/healthz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL - Banco de dados principal
  postgres:
    build:
      context: ./docker/postgres
      dockerfile: Dockerfile
    container_name: postgres-db
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres123
      - POSTGRES_MULTIPLE_DATABASES=n8n,automation_db,test_db
      - POSTGRES_MULTIPLE_USERS=n8n_user:n8n_password,auto_user:auto_password,test_user:test_password
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
      - ./logs/postgres:/var/log/postgresql
    networks:
      - automation-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # SQL Server - Banco de dados Microsoft
  sqlserver:
    build:
      context: ./docker/sqlserver
      dockerfile: Dockerfile
    container_name: sqlserver-db
    restart: unless-stopped
    ports:
      - "1433:1433"
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=SqlServer123!
      - MSSQL_PID=Developer
      - MSSQL_TCP_PORT=1433
      - MSSQL_AGENT_ENABLED=true
    volumes:
      - ./data/sqlserver:/var/opt/mssql/data
      - ./docker/sqlserver/init:/docker-entrypoint-initdb.d
      - ./logs/sqlserver:/var/opt/mssql/log
    networks:
      - automation-network
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P SqlServer123! -Q 'SELECT 1' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PgAdmin - Interface web para PostgreSQL
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin-web
    restart: unless-stopped
    ports:
      - "8080:80"
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@automation.local
      - PGADMIN_DEFAULT_PASSWORD=admin123
      - PGADMIN_CONFIG_SERVER_MODE=False
    volumes:
      - ./data/pgadmin:/var/lib/pgadmin
      - ./config/pgadmin/servers.json:/pgadmin4/servers.json
    depends_on:
      - postgres
    networks:
      - automation-network

  # Adminer - Interface web universal para bancos de dados
  adminer:
    image: adminer:latest
    container_name: adminer-web
    restart: unless-stopped
    ports:
      - "8081:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    depends_on:
      - postgres
      - sqlserver
    networks:
      - automation-network

  # Redis - Cache e message broker
  redis:
    image: redis:7-alpine
    container_name: redis-cache
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redis123
    volumes:
      - ./data/redis:/data
    networks:
      - automation-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx - Proxy reverso e load balancer
  nginx:
    build:
      context: ./docker/nginx
      dockerfile: Dockerfile
    container_name: nginx-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx:/etc/nginx/conf.d
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - n8n
    networks:
      - automation-network

networks:
  automation-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
  sqlserver_data:
  n8n_data:
  redis_data:
  pgadmin_data: