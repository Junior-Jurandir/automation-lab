version: '3.8'

# Configuração para ambiente de produção
# Use este arquivo para deploy em produção com:
# docker-compose -f docker-compose.prod.yml up -d

services:
  # N8N - Plataforma de Automação (Produção)
  n8n:
    build:
      context: ./docker/n8n
      dockerfile: Dockerfile
    container_name: n8n-automation-prod
    restart: always
    environment:
      - N8N_BASIC_AUTH_ACTIVE=${N8N_BASIC_AUTH_ACTIVE:-true}
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD}
      - N8N_HOST=${N8N_HOST}
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - WEBHOOK_URL=${WEBHOOK_URL}
      - GENERIC_TIMEZONE=${TIMEZONE:-America/Sao_Paulo}
      - N8N_LOG_LEVEL=warn
      - N8N_LOG_OUTPUT=file
      - N8N_LOG_FILE_LOCATION=/home/node/logs/
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=${POSTGRES_N8N_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_N8N_PASSWORD}
      - N8N_ENCRYPTION_KEY=${N8N_ENCRYPTION_KEY}
      - N8N_USER_MANAGEMENT_DISABLED=false
      - N8N_COMMUNITY_PACKAGES_ENABLED=true
      - N8N_METRICS=true
    volumes:
      - n8n_data:/home/node/.n8n
      - n8n_logs:/home/node/logs
      - n8n_config:/home/node/config
    depends_on:
      - postgres
      - redis
    networks:
      - automation-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5678/healthz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # PostgreSQL - Banco de dados principal (Produção)
  postgres:
    build:
      context: ./docker/postgres
      dockerfile: Dockerfile
    container_name: postgres-db-prod
    restart: always
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_MULTIPLE_DATABASES=${POSTGRES_MULTIPLE_DATABASES}
      - POSTGRES_MULTIPLE_USERS=${POSTGRES_MULTIPLE_USERS}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - postgres_logs:/var/log/postgresql
      - ./docker/postgres/init:/docker-entrypoint-initdb.d:ro
    networks:
      - automation-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # SQL Server - Banco de dados Microsoft (Produção)
  sqlserver:
    build:
      context: ./docker/sqlserver
      dockerfile: Dockerfile
    container_name: sqlserver-db-prod
    restart: always
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${MSSQL_SA_PASSWORD}
      - MSSQL_PID=Standard
      - MSSQL_TCP_PORT=1433
      - MSSQL_AGENT_ENABLED=true
    volumes:
      - sqlserver_data:/var/opt/mssql/data
      - sqlserver_logs:/var/opt/mssql/log
      - ./docker/sqlserver/init:/docker-entrypoint-initdb.d:ro
    networks:
      - automation-network
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P ${MSSQL_SA_PASSWORD} -Q 'SELECT 1' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # Redis - Cache e message broker (Produção)
  redis:
    image: redis:7-alpine
    container_name: redis-cache-prod
    restart: always
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD} --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - automation-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M

  # Nginx - Proxy reverso e load balancer (Produção)
  nginx:
    build:
      context: ./docker/nginx
      dockerfile: Dockerfile
    container_name: nginx-proxy-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - nginx_config:/etc/nginx/conf.d
      - nginx_logs:/var/log/nginx
      - nginx_ssl:/etc/nginx/ssl
    depends_on:
      - n8n
    networks:
      - automation-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M

  # Watchtower - Atualizações automáticas (Opcional)
  watchtower:
    image: containrrr/watchtower
    container_name: watchtower-prod
    restart: always
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=86400  # 24 horas
      - WATCHTOWER_INCLUDE_STOPPED=true
      - WATCHTOWER_NOTIFICATIONS=email
      - WATCHTOWER_NOTIFICATION_EMAIL_FROM=${WATCHTOWER_EMAIL_FROM}
      - WATCHTOWER_NOTIFICATION_EMAIL_TO=${WATCHTOWER_EMAIL_TO}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER=${WATCHTOWER_EMAIL_SERVER}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT=${WATCHTOWER_EMAIL_PORT}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER=${WATCHTOWER_EMAIL_USER}
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD=${WATCHTOWER_EMAIL_PASSWORD}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - automation-network
    profiles:
      - watchtower

networks:
  automation-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/postgres
  
  sqlserver_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/sqlserver
  
  n8n_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/n8n
  
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH}/redis
  
  postgres_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOGS_PATH}/postgres
  
  sqlserver_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOGS_PATH}/sqlserver
  
  n8n_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOGS_PATH}/n8n
  
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOGS_PATH}/nginx
  
  n8n_config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${CONFIG_PATH}/n8n
  
  nginx_config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${CONFIG_PATH}/nginx
  
  nginx_ssl:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${CONFIG_PATH}/nginx/ssl